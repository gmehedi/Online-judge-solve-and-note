#include <bits/stdc++.h>
#define pii              pair <ull,int>
#define pll              pair <long long,long long>
#define sc               scanf
#define pf               printf
#define Pi               2*acos(0.0)
#define ms(a,b)          memset(a, b, sizeof(a))
#define pb(a)            push_back(a)
#define MP               make_pair
#define db               double
#define ll               long long
#define ull              unsigned long long
#define f                first
#define s                second
#define sqr(x)           (x)*(x)
#define VI               vector <int>
#define DBG              pf("Hi\n")
#define MOD              1000000007
#define SZ(a)            (int)a.size()
#define sf(a)            scanf("%d",&a)
#define sfl(a)           scanf("%lld",&a)
#define sff(a,b)         scanf("%d %d",&a,&b)
#define sffl(a,b)        scanf("%lld %lld",&a,&b)
#define sfff(a,b,c)      scanf("%d %d %d",&a,&b,&c)
#define sfffl(a,b,c)     scanf("%lld %lld %lld",&a,&b,&c)
#define loop(i,n)        for(int i=0;i<n;i++)
#define loop1(i,n)       for(int i=1;i<=n;i++)
#define REP(i,a,b)       for(int i=a;i<b;i++)
#define RREP(i,a,b)      for(int i=a;i>=b;i--)
#define intlim           2147483648
#define ull              unsigned long long
#define gcd(a, b)        __gcd(a, b)
#define lcm(a, b)        ((a)*((b)/gcd(a,b)))
#define mk(x1,y1) make_pair(x1, y1)
#define maxl 100001
#define psz 20
using namespace std;
int n,q;
int a[(maxl*2)+1],have[(maxl*2)+1],tree[(maxl*2)*4];
void init()
{
    memset(a,0,sizeof a);
    memset(have,0,sizeof have);
}

void Build(int node, int s, int e)
{//cout<<"S  "<<s<<"  "<<e<<endl;
    if(s == e)
    {
        tree[node]=have[s];
        return;
    }
    int mid=(s+e)/2;
    int left=node*2;
    int right=left+1;
    Build(left,s,mid);
    Build(right,mid+1,e);

    tree[node]=tree[left]+tree[right];
    // if(tree[node]>0) cout<<"T  "<<tree[node]<<"  "<<tree[left]<<"  "<<tree[right]<<"  "<<node<<endl;
}

void Update(int node, int s, int e, int ind, int val)
{
    if(ind>e || ind<s) return;
    if(s>=ind && e<=ind)
    {
        tree[node]=val;
        have[ind]=val;
        return;
    }
    int mid=(s+e)/2;
    int left=node*2;
    int right=left+1;
    Update(left,s,mid,ind,val);
    Update(right,mid+1,e,ind,val);

    tree[node]=tree[left]+tree[right];

}

int Querie(int node, int s, int e, int i, int j)
{//cout<<"KK  "<<"  "<<s<<" "<<i<<"  "<<e<<"  "<<j<<endl;
    if(i>e || j<s) return 0;
    if(s>=i && e<=j)
    {//cout<<"F  "<<s<<"  "<<e<<"  "<<tree[node]<<endl;
        return tree[node];
    }
    int mid=(s+e)/2;
    int left=node*2;
    int right=left+1;
    int t2=Querie(left,s,mid,i,j);
    int t1=Querie(right,mid+1,e,i,j);

    return (t1+t2);
}

int main()
{
    int t,cas=1,last=2*maxl;
    scanf("%d",&t);
    while(t--)
    {
        init();
        scanf("%d %d",&n,&q);
        for(int i=1; i<=n; i++) { scanf("%d",&a[i]), have[i]=1; }
        Build(1,1,last);
        printf("Case %d:\n",cas++);
        while(q--)
        {
            char ch;
            scanf(" %c",&ch);
            if(ch == 'c')
            {
                int low=1,high=n,ans=0,pos;
                scanf("%d",&pos);
                while(low <= high)
                {
                    int mid=(low+high)/2;
                    int res=Querie(1,1,last,1,mid);
                    if(res >= pos)
                    {
                        high=mid-1;
                        ans=mid;
                    }
                    else { low=mid+1; }
                }
                if(have[ans] == 0) { printf("none\n"); }
                else { printf("%d\n",a[ans]); Update(1,1,last,ans,0); }
            }
            else
            {
                int val;
                scanf("%d",&val);
                n++;
                a[n]=val;
                Update(1,1,last,n,1);
            }
        }
    }
    return 0;
}

