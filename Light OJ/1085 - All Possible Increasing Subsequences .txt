#include <bits/stdc++.h>
#define pii              pair <ull,int>
#define pll              pair <long long,long long>
#define sc               scanf
#define pf               printf
#define Pi               2*acos(0.0)
#define ms(a,b)          memset(a, b, sizeof(a))
#define pb(a)            push_back(a)
#define MP               make_pair
#define db               double
#define ll               long long
#define ull              unsigned long long
#define f                first
#define s                second
#define sqr(x)           (x)*(x)
#define VI               vector <int>
#define DBG              pf("Hi\n")
#define MOD              1000000007
#define SZ(a)            (int)a.size()
#define sf(a)            scanf("%d",&a)
#define sfl(a)           scanf("%lld",&a)
#define sff(a,b)         scanf("%d %d",&a,&b)
#define sffl(a,b)        scanf("%lld %lld",&a,&b)
#define sfff(a,b,c)      scanf("%d %d %d",&a,&b,&c)
#define sfffl(a,b,c)     scanf("%lld %lld %lld",&a,&b,&c)
#define loop(i,n)        for(int i=0;i<n;i++)
#define loop1(i,n)       for(int i=1;i<=n;i++)
#define REP(i,a,b)       for(int i=a;i<b;i++)
#define RREP(i,a,b)      for(int i=a;i>=b;i--)
#define intlim           2147483648
#define ull              unsigned long long
#define gcd(a, b)        __gcd(a, b)
#define lcm(a, b)        ((a)*((b)/gcd(a,b)))
#define mk(x1,y1) make_pair(x1, y1)
#define maxl 100101
#define psz 20
using namespace std;
ll n;
vector<ll >v;

struct str
{
    ll prop;
    ll sum;
}
tree[maxl*4+10];

void Build(ll  node, ll  s, ll  e)
{
    if(e == s)
    {
        tree[node].prop=0;
        tree[node].sum=0;
        return;
    }
    ll  mid=(e+s)/2;
    ll  left=node*2;
    ll  right=left+1;
    Build(left,s,mid);
    Build(right,mid+1,e);
    tree[node].prop=0, tree[node].sum=0;

}
void Update(ll  node, ll  s, ll  e, ll  i, ll  j, ll  val)
{
    if(s>j || e<i) return;
    if(s>=i && e<=j)
    {
        tree[node].prop+=val;
        tree[node].sum +=(e-s+1)*val;
      //  cout<<"S  "<<s<<" "<<"  "<<e<<"  "<<tree[node].prop<<endl;
        return;
    }
    ll  mid=(e+s)/2;
    ll  left=node*2;
    ll  right=left+1;
    Update(left,s,mid,i,j,val);
    Update(right,mid+1,e,i,j,val);
    tree[node].sum=(tree[left].sum+tree[right].sum)%MOD;
}

ll  Querie(ll  node, ll  s, ll  e, ll  i, ll  j,ll  carry)
{
  //  cout<<"A  "<<i<<" "<<j<<endl;
    if(s>j || e<i) return 0;
    if(s>=i && e<=j)
    {
        return tree[node].sum+carry*(e-s+1);
    }
    ll  mid=(s+e)/2;
    ll  left=node*2;
    ll  right=left+1;
    ll  t1=Querie(left,s,mid,i,j,carry);
    ll  t2=Querie(right,mid+1,e,i,j,carry);

    return (t1+t2)%MOD;

}
int  main()
{
  //  freopen("in.txt","r",stdin);
    ll  t,cas=1;
    scanf("%lld",&t);
    while(t--)
    {
        v.clear();
        scanf("%lld",&n);
        ll  a[n+2];
        for(ll  i=0; i<n; i++)
        {
            scanf("%d",&a[i]);
            v.pb(a[i]);
        }
        sort(v.begin(),v.end());
        v.erase(unique(v.begin(),v.end()),v.end());
        map<ll ,ll >mp;
        for(ll  i=0; i<(ll )v.size(); i++)
        {
            mp[v[i]]=i+1;
        }
        ll  len=v.size();
        Build(1,1,maxl);
        ll ans=0;
        for(ll  i=0; i<n; i++)
        {
           // cout<<"Q  1   "<<mp[a[i]]-1<<endl;
            ll  temp=Querie(1,1,maxl,1,mp[a[i]]-1,tree[1].prop)+1;
            ans += temp%MOD;
           // cout<<"T "<<temp<<"  "<<mp[a[i]]<<endl;
            Update(1,1,maxl,mp[a[i]],mp[a[i]],temp);
         //   cout<<"WWW  "<<a[i]<<"  "<<mp[a[i]]<<"  "<<len<<endl;
        }
        printf("Case %lld: %lld\n",cas++,ans%MOD);

    }
    return 0;
}

